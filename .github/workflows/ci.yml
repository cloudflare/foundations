name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Install cargo deny
        run: cargo install --locked cargo-deny
      - name: Lint
        run: ./scripts/lint.sh
        shell: bash

  check-features:
    name: Check feature combinations
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Install cargo deny
        run: cargo install --locked cargo-hack
      - name: Check
        run: ./scripts/check-features.sh
        shell: bash

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        thing:
          - x86_64-linux
          - aarch64-linux
          - arm64-android
          - arm-android
          - aarch64-ios
          - x86_64-macos
        include:
          - apt_packages: ""
          - custom_env: {}
          - build_only: false
          - cargo_args: ""

          - thing: x86_64-linux
            target: x86_64-unknown-linux-gnu
            rust: stable
            os: ubuntu-latest

          - thing: aarch64-linux
            build_only: true
            target: aarch64-unknown-linux-gnu
            rust: stable
            os: ubuntu-latest
            apt_packages: crossbuild-essential-arm64
            custom_env:
              CC: aarch64-linux-gnu-gcc
              CXX: aarch64-linux-gnu-g++
              CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-g++

          - thing: arm64-android
            build_only: true
            target: aarch64-linux-android
            rust: stable
            os: ubuntu-latest
            cargo_args: --no-default-features --features server-client-common-default

          - thing: arm-android
            build_only: true
            target: armv7-linux-androideabi
            rust: stable
            os: ubuntu-latest
            cargo_args: --no-default-features --features server-client-common-default

          - thing: aarch64-ios
            build_only: true
            target: aarch64-apple-ios
            os: macos-latest
            cargo_args: --no-default-features --features server-client-common-default

          - thing: x86_64-macos
            target: x86_64-apple-darwin
            rust: stable
            os: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Install Rust (rustup)
        run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
        shell: bash
      - name: Install target-specific APT dependencies
        if: "matrix.apt_packages != ''"
        run: sudo apt update && sudo apt install -y ${{ matrix.apt_packages }}
        shell: bash
      - run: rustup target add ${{ matrix.target }}
      - name: Set Android Linker path
        if: endsWith(matrix.thing, '-android')
        run: echo "CARGO_TARGET_$(echo ${{ matrix.target }} | tr \\-a-z _A-Z)_LINKER=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/$(echo ${{ matrix.target }} | sed s/armv7/armv7a/)21-clang++" >> "$GITHUB_ENV"
      - name: Build tests
        # We `build` because we want the linker to verify we are cross-compiling correctly for check-only targets.
        run: cargo build --target ${{ matrix.target }} ${{matrix.cargo_args}}
        shell: bash
        env: ${{ matrix.custom_env }}
      - name: Run tests
        if: "!matrix.build_only"
        run: _RJEM_MALLOC_CONF=prof:true cargo test --target ${{ matrix.target }} ${{matrix.cargo_args}}
        shell: bash
        env: ${{ matrix.custom_env }}
